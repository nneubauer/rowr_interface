#!/usr/bin/env ruby

require 'rowr_interface'
require 'unirest'
require 'descriptive_statistics'

class WorkoutTracker

  BASE_URL = 'http://192.168.0.10:3000'
  
  BUCKET_SIZE_IN_SECONDS = 10 #seconds
  MIN_BUCKETS_TO_BE_A_WORKOUT = 2
  MAX_ERRORS = 100
  
  def initialize
    @interface = RowrInterface.new
    
    # each element in the buckets collects one minute of data
    @buckets = []
    @current_bucket = {}
    @data_mutex = Monitor.new
    @send_queue = []
    @queue_mutex = Monitor.new
    
    reset_workout    
  end
  
  def start
    liste_thread = start_listening!
    query_thread = start_querying!
    bucket_thread = aggregate_to_buckets!
    data_thread = post_data!
    
    liste_thread.join
    query_thread.join
    bucket_thread.join
    data_thread.join
  end
  
  protected
  
  def reset_workout
    @current_workout = {
      start: Time.now,
      end: Time.now,
      distance: 0,
      energy_burned: 0,
      sample_ids: []
    }
  end
  
  # Adds data threadsafe to @current_bucket
  def add_data(type, value)
    @data_mutex.synchronize do
      @current_bucket[type] ||= []
      @current_bucket[type] << value
    end
  end
  
  # Calculates the mean of the middle 90% of data
  def mean_without_outliers(values)
    lower_limit = values.percentile(5)
    upper_limit = values.percentile(95)
    
    #puts "Cleaning data: " + values.inspect
    #puts "Lower: " + lower_limit.to_s + ", upper: " + upper_limit.to_s
    
    values.select { |v| v <= upper_limit && v >= lower_limit }.mean
  end
  
  # creates a list of samples of a bucket, each element is immutable
  def bucket_to_list_of_samples(bucket)
    list = []
        
    #Average types
    [:pull_time, :rest_time, :stroke_to_stroke_time].each do |type|
      values = bucket[:data][type]
      unless values.nil?
        list << {sample: {
          start: bucket[:start_date],
          end: bucket[:end_date],
          sample_type: type,
          quantity: mean_without_outliers(values)
          }}.freeze
        #puts "Just added a sample " + list.last.inspect
      end
    end
    
    [:current_energy, :current_speed].each do |type|
      values = bucket[:data][type]
      unless values.nil?
        list << {sample: {
          start: bucket[:start_date],
          end: bucket[:end_date],
          sample_type: type.to_s.sub("current", "average"),
          quantity: mean_without_outliers(values)
          }}.freeze
        #puts "Just added a sample " + list.last.inspect
      end
    end
    
    #Diff types
    [:total_distance, :total_calories].each do |type|
      values = bucket[:data][type]
      unless values.nil?
        list << {sample: {
          start: bucket[:start_date],
          end: bucket[:end_date],
          sample_type: type,
          quantity: values.max - values.min
          }}.freeze
        #puts "Just added a sample " + list.last.inspect
      end
    end
    
    #count_types
    values = bucket[:data][:stroke_to_stroke_time]
    unless values.nil?
      list << {sample: {
        start: bucket[:start_date],
        end: bucket[:end_date],
        sample_type: :strokes,
        quantity: values.size
        }}.freeze
      #puts "Just added a sample " + list.last.inspect
    end
    
    list
  end
  
  def post_workout(workout)
    Thread.new do
      response = Unirest.post(BASE_URL + "/workouts",
        headers: {"Content-Type" => "application/json"},
        parameters: {workout: workout}.to_json,
        auth: { user: "test", password: "test" }
      )
  
      if response.code != 201
        puts "Error while posting workout: " + response.inspect
        #retry
        sleep(60)
        post_workout(workout)
      end
    end
  end
  
  def enqueue_buckets
    @data_mutex.synchronize do
    
      if @buckets.size >= MIN_BUCKETS_TO_BE_A_WORKOUT
        puts "Training more than " + MIN_BUCKETS_TO_BE_A_WORKOUT.to_s + " buckets. Posting pending buckets."
        
        @buckets.select { |b| !b[:posted] }.each do |bucket|

          bucket_to_list_of_samples(bucket).each do |sample|
            @queue_mutex.synchronize do 
              @send_queue << sample
            end
          end
          
          bucket[:posted] = true
        end        
      else
        puts "Not enough buckets to enqueue for posting: " + @buckets.size.to_s
      end
    end    
  end
  
  def post_next_sample!
    @queue_mutex.synchronize do
    
      if !@send_queue.empty?
        data = @send_queue.last
        
        #puts "About to post: " + data.inspect
        
        response = Unirest.post(BASE_URL + "/samples",
          headers: {"Content-Type" => "application/json"},
          parameters: data.to_json,
          auth: { user: "test", password: "test" }
        )
      
        if response.code == 201
          @send_queue.delete(data)
          @current_workout[:sample_ids] << response.body.to_i
        else
          puts "Error while posting. " + response.inspect
        end
      end 
    end
  end
  
  def post_data!
    Thread.new do
      while true
        sleep(1)
        post_next_sample!
      end
    end
  end

  def process_current_bucket_to_backlog
    @data_mutex.synchronize do
      
      #clean buckets if the current bucket is not adjacent
      if @buckets.size > 0 and @buckets.last[:end_date] + (BUCKET_SIZE_IN_SECONDS + BUCKET_SIZE_IN_SECONDS * 0.5) < Time.now
        puts "Cleaning out buckets, because last one is more than " + (BUCKET_SIZE_IN_SECONDS + BUCKET_SIZE_IN_SECONDS * 0.5).to_s + " seconds ago."
                
        #the workout has ended, post it (no update, who knows how long it has been...)
        if @buckets.size > MIN_BUCKETS_TO_BE_A_WORKOUT
          post_workout(@current_workout.clone)
        end
        
        reset_workout
        @buckets = []
      end
      
      if !@current_bucket[:stroke_to_stroke_time].nil? && @current_bucket[:stroke_to_stroke_time].size > 0
        if !@buckets.last.nil?
          start_date = @buckets.last[:end_date]
        else
          start_date = Time.now - BUCKET_SIZE_IN_SECONDS
        end
        resulting_bucket = {start_date: start_date, end_date: Time.now, data: @current_bucket}
        puts "Adding new bucket to backlist: " + resulting_bucket.inspect
      
        @buckets << resulting_bucket
        
        #update workout which is still onging
        status = @interface.current_status
        
        @current_workout[:end] = Time.now
        @current_workout[:distance] = status[:total_distance]
        @current_workout[:energy_burned] = status[:total_calories]
      else
        puts "Current bucket had no strokes. Doing nothing."
      end
      
      @current_bucket = {}
      
      enqueue_buckets
    end
    
  end

  def aggregate_to_buckets!
    Thread.new do 
      while true
        sleep BUCKET_SIZE_IN_SECONDS
        process_current_bucket_to_backlog
      end
    end
  end
  
  def start_querying!
    Thread.new do 
      while true
        sleep 1.0
        data = @interface.current_status
        
        data.each do |key, value|
          add_data(key, value)
        end
      end
    end
  end
  
  def start_listening!
    
    last_stroke_notification = Time.now
    
    t = @interface.start
    @interface.each_stroke do |pull_time|
      #calculate stroke to stroke
      stroke_to_stroke_time = Time.now - last_stroke_notification
      last_stroke_notification = Time.now
      
      #simple noise cleaning
      unless stroke_to_stroke_time > 5 #seconds - no one rows that slowly...
        add_data(:stroke_to_stroke_time, stroke_to_stroke_time)
        add_data(:pull_time, pull_time)
        add_data(:rest_time, stroke_to_stroke_time - pull_time)   
      end
    end
    
    @interface.on_reset do
      @data_mutex.synchronize do
        #this will put the last bucket to the backlog
        process_current_bucket_to_backlog
         
        #send pending samples
        @queue_mutex.synchronize do
          counter = 0
          while !@send_queue.empty?
            counter += 1
            if counter > MAX_ERRORS
              puts "Error while posting remaining samples."
              @send_queue.clear
              break
            end
             
            post_next_sample!
            sleep(0.100)
          end
        end
         
        #now reset everything and post the workout if needed
        if @buckets.size > MIN_BUCKETS_TO_BE_A_WORKOUT
          post_workout(@current_workout.clone)
        end
        
        reset_workout
        @buckets = []
      end
    end
    
    t
  end
  
end

WorkoutTracker.new.start